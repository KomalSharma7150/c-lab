
// Suppose you are working on a geometry library that deals with different types of geometric shapes, including
// circles, rectangles, and triangles. Each shape has common properties like area and perimeter, but also specific
// attributes such as radius for circles, length and width for rectangles, and side lengths for triangles.
//  Develop a class hierarchy for geometric shapes using inheritance in C++.
//  Explain how you would utilize inheritance and polymorphism to implement algorithms for
// calculating area and perimeter that are specific to each type of shape
#include <iostream>
#include <cmath> 
using namespace std;
class Shape {
public:
    virtual double calculateArea() const = 0;  
    virtual double calculatePerimeter() const = 0;
};
class Circle : public Shape {
private:
    double radius;

public:
    Circle(double r) : radius(r) {}
    double calculateArea() const override {
        return M_PI * radius * radius;
    }
    double calculatePerimeter() const override {
        return 2 * M_PI * radius;
    }
};
class Rectangle : public Shape {
private:
    double length;
    double width;

public:
    Rectangle(double l, double w) : length(l), width(w) {}
    double calculateArea() const override {
        return length * width;
    }

    double calculatePerimeter() const override {
        return 2 * (length + width);
    }
};
class Triangle : public Shape {
private:
    double side1, side2, side3;

public:
    Triangle(double s1, double s2, double s3) : side1(s1), side2(s2), side3(s3) {}
    double calculateArea() const override {
        double s = (side1 + side2 + side3) / 2;
        return sqrt(s * (s - side1) * (s - side2) * (s - side3));
    }
    double calculatePerimeter() const override {
        return side1 + side2 + side3;
    }
};

int main() {
    Circle circle(5.0);
    Rectangle rectangle(4.0, 6.0);
    Triangle triangle(3.0, 4.0, 5.0);
    cout << "Circle: Area = " << circle.calculateArea() << ", Perimeter = " << circle.calculatePerimeter() << endl;
    cout << "Rectangle: Area = " << rectangle.calculateArea() << ", Perimeter = " << rectangle.calculatePerimeter() << endl;
    cout << "Triangle: Area = " << triangle.calculateArea() << ", Perimeter = " << triangle.calculatePerimeter() << endl;

    return 0;
}
